#!/bin/bash
set -eEu

# organization:
# main: parse arguments. Called from the bottom so everything is declared
# actually_run: actually run


# apt install qem-user-static qemu-system-arm

MOUNT_POINT=/mnt/img
verbose=1
rpi_shell=0
uart=0
target=""
hostname=""
wifi_ssid=""
wifi_pass=""
username="mark"
mounted=false
keep_mount=false
get_current=false
keep_img=false

# shellcheck disable=SC2120
help () {
    # if arguments, print them
    [ $# == 0 ] || echo "$*"

  cat <<EOF
usage: $0 <options> zipfile
 -w, --write=target       write raspian to sdcard
 -h, --host=name          sets hostname on rpi
 -u, --user=name          sets username on rpi
 -s, --shell              start shell on raspian
     --uart               enable uart
     --wifi-ssid=ssid     set wifi ssid
     --wifi-pass=pass     set wifi password
                          TODO: wifi doesn't work, wlan0 just doesn't get enabled?
 -v, --verbose            verbosity, 2 levels
 -q, --quiet              none verbosity
     --keep-mount         don't unmount at the end
     --get-current        give link to current pi image
     --unmount            try to unmount a previous run then exit
     --keep-existing-img  don't throw out existing .img
     --help               show this help
EOF

    # if args, exit 1 else exit 0
    [ $# == 0 ] || exit 1
    exit 0
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

main() {
    # getopt short options go together, long options have commas
    TEMP=$(getopt -o w:h:u:svq --long help,write:,hostname:,user:,shell,verbose,uart,wifi-ssid:,wifi-pass:,keep-mount,unmount,get-current,keep-existing-img -n "$0" -- "$@")
    #shellcheck disable=SC2181
    if [ $? != 0 ] ; then
        die "Something wrong with getopt" >&2
    fi
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            --help) help; exit 0; shift ;;
            -h|--hostname) hostname=$2 ; shift 2 ;;
            -u|--user) username=$2 ; shift 2 ;;
            --wifi-ssid) wifi_ssid=$2 ; shift 2 ;;
            --wifi-pass) wifi_pass=$2 ; shift 2 ;;
            -s|--shell) rpi_shell=1 ; shift ;;
            --uart) uart=1 ; shift ;;
            -v|--verbose) ((verbose++)) ; shift ;;
            -q|--quiet) verbose=0 ; shift ;;
            -w|--write) target=$2 ; shift 2 ;;
            --keep-mount) keep_mount=true ; shift ;;
            --unmount) unmount_all ; exit 0 ; shift ;;
            --get-current) get_current=true ; shift ;;
            --keep-existing-img) keep_img=true ; shift ;;
            --) shift ; break ;;
            *) echo "Internal error!" ; exit 1 ;;
        esac
    done

    if [ "$get_current" = true ]; then
        getLatestPiImageLink
        exit 0
    fi


    zipfile=${1:-}
    if [ -z "$zipfile" ]; then
        help "need to pass in zipfile"
    fi

    if [[ -n "$hostname" ]]; then echo "hostname: $hostname"; fi
    echo "username: $username"
    if [ "$rpi_shell" -eq 1 ]; then echo "launching shell"; fi
    if [[ -n "$target" ]]; then echo "writing to target $target"; fi
    echo "verbosity: $verbose"
    echo "sourcefile: $zipfile"

    # if verbose is 3+, echo all commands
    [ $verbose -lt 3 ] || set -x

    actually_run
}


cleanup() {
    echo "failed $?"
    if [ "$mounted" = true ]; then
        unmount_all
    fi
}

vecho() { [ $verbose -lt 2 ] || echo "$@" >/dev/stderr; }
SUDO() {
    cmd="sudo $*"
    [ $verbose -lt 1 ] || echo "SUDO '$cmd'"

    $cmd
}

dd_somewhere () {
    dev=$1
    if [ ! -e "$dev" ]; then
        die "$dev doesn't exist"
    fi
    echo "dding to $dev"
    SUDO dd if="$imgfile" of="$dev" bs=1M status=progress
}


mount_loop() {
    mounted=true
    # using SUDO breaks everything
    loop=$(sudo losetup -f -P --show "$imgfile")
    SUDO mount "${loop}p2" "$MOUNT_POINT"
    SUDO mount "${loop}p1" "$MOUNT_POINT/boot"
    ## bootStart=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $2); print $2}' | head -n1)
    ## bootSize=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $4); print $4}' | head -n1)
    ## rootStart=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $2); print $2}' | head -n2 | tail -n1)
    ## rootSize=$(parted -s "$imgfile" unit B print 2>/dev/null | awk '/^Number/{p=1;next}; p{gsub(/[^[:digit:]]/, "", $4); print $4}' | head -n2 | tail -n1)
    ## #parted -s "$imgfile" unit B print
    ## #echo "bootStart: $bootStart"
    ## #echo "bootSize: $bootSize"
    ## #echo "rootStart: $rootStart"
    ## #echo "rootSize: $rootSize"
    ## #exit 50

    ## # check if things end in "B" because parted does that sometimes and mount doesn't like it
    ## if [[ "$bootStart" =~ [^0-9] ]]; then
    ##     #some non-numerics
    ##     if [[ "$bootStart" =~ [0-9]B$ ]]; then
    ##         #strip B off all sizes
    ##         bootStart=${bootStart::-1}
    ##         bootSize=${bootSize::-1}
    ##         rootStart=${rootStart::-1}
    ##         rootSize=${rootSize::-1}
    ##     else
    ##         echo "boot start invalid: '$bootStart'"
    ##     fi
    ## fi


    ## echo "mounting"
    ## SUDO mount -o loop,offset="$rootStart",sizelimit="$rootSize" "$imgfile" $MOUNT_POINT
    ## SUDO mount -o loop,offset="$bootStart",sizelimit="$bootSize" "$imgfile" $MOUNT_POINT/boot
}

is_mounted() {
    mount | grep "$(realpath "$1" 2>/dev/null)" &>/dev/null
}

setup_chroot() {
    # "make sure binfmt-support will be able to execute your code once you change your root filesystem"
    # shomehow qemu-arm-static does that.
    if [[ ! -f /usr/bin/qemu-arm-static ]]; then
        echo "Install qemu arm"
        return
    fi
    SUDO cp /usr/bin/qemu-arm-static ${MOUNT_POINT}/usr/bin/

    # I guess this isn't needed anymore?
    # > To get everything work (e.g., network) you need to comment out everything in /mnt/etc/ld.so.preload before you chroot in.
    # https://wiki.debian.org/RaspberryPi/qemu-user-static
    #SUDO mv $MOUNT_POINT/etc/ld.so.preload $MOUNT_POINT/etc/ld.so.preload.disabled

    for f in proc dev dev/pts sys ;do
        vecho "trying to mount $f"
        is_mounted $MOUNT_POINT/$f || SUDO mount --bind /$f $MOUNT_POINT/$f
    done
}

run_chroot() {
    cmd="sudo chroot ${MOUNT_POINT} /bin/bash -c \"$*\""
    echo "running for chroot '$cmd'"
    eval "$cmd"
}



unmount_all() {
    [ -n "$MOUNT_POINT" ] || return 1
    if [ "$keep_mount" = true ]; then
        echo "NOT UNMOUNTING"
        return 0;
    fi

    # we disabled /etc/ld.so.preload, so if we disabled it re-enable it
    [ -f $MOUNT_POINT/etc/ld.so.preload.disabled ] && SUDO mv $MOUNT_POINT/etc/ld.so.preload.disabled $MOUNT_POINT/etc/ld.so.preload

    for f in proc dev/pts dev sys boot;do
        vecho "trying to unmount $f"
        is_mounted $MOUNT_POINT/$f && SUDO umount $MOUNT_POINT/$f
    done
    is_mounted $MOUNT_POINT && SUDO umount $MOUNT_POINT
    if [ ! "$mounted" = true ]; then
        echo "we didn't actually mount, so we probably don't know what the lop file was."
        echo "Check 'losetup --list' and run 'sudo losetup -d /dev/loopX' to cleanup."
    else
        losetup --list | grep "$loop" >/dev/null && SUDO losetup -d "$loop"
    fi
    mounted=false
}





getLatestPiImageLink() {
    curl -s http://downloads.raspberrypi.org/rss.xml | xq '[.rss.channel.item[] | select(.title | contains("raspios_lite"))] | .[-1]'  | jq .link -r
}

actually_run() {
    if is_mounted $MOUNT_POINT ; then
        die "something is mounted to $MOUNT_POINT, fix it and try again"
    fi
    #get zipfile, confirm it exists
    if [[ ! -f "$zipfile" ]]; then
        die "zipfile/imgfile doesn't exist";
    fi

    latestLink=$(getLatestPiImageLink)
    echo "latestlink $latestLink"
    latest=$(echo "$latestLink" | sed -n 's/.*\([[:digit:]]\{4\}-[[:digit:]]\{2\}-[[:digit:]]\{2\}-raspios.*\)\..*\.torrent/\1/p')

    echo "latest: $latest"
    echo "yours: $zipfile"
    if [[ ! "$(basename "$zipfile")" == "$latest"* ]]; then
        echo "your image is out of date!"
        echo "$latestLink"
        read -n 1 -s -r -p "Press the any key to continue"
        echo ""
    fi

    extension=${zipfile##*.}
    if [ "$extension" == "img" ]; then
        imgfile=$zipfile
    elif [ "$extension" == "xz" ]; then
        imgfile=${zipfile/.xz/}
        zipdir=$(dirname "$(realpath "${zipfile}")")

        cd "$zipdir"
        if [ -f "$imgfile" ] && [ "$keep_img" = false ]; then
            rm "$imgfile"
        fi
        if [ ! -f "$imgfile" ]; then
            unxz --keep "$zipfile"
            if [[ ! -f "$imgfile" ]]; then
                die "Issue unzipping $zipfile";
            fi
        fi
    else
        die "dunno how to handle $extension files $zipfile"
    fi


    trap cleanup EXIT ERR

    #START OF ACTUAL STUFF

    mount_loop
    if [ -z "${MOUNT_POINT}" ] || [ ! -f "$MOUNT_POINT/etc/rpi-issue" ] || [ ! -f "$MOUNT_POINT/boot/issue.txt" ]; then
        die raspbian root not as expected
    fi
    #now we're mounted in memory

    # enable ssh
    SUDO touch $MOUNT_POINT/boot/ssh

    setup_chroot
    #now we can run commands with chroot and exepct them to work

    #assume that if the /home/pi directory doesn't exist, all setup is done.
    if [ ! -d $MOUNT_POINT/home/pi/ ]; then
        msg "ASSUMING USER ALREADY CONFIGURED: TODO maybe not that"
    else
        run_chroot "groups pi"
        run_chroot "useradd $username -m -G \\\$(groups pi | sed 's/pi : pi //; s/ /,/g')"
        run_chroot "echo '$username:hunter.2' | chpasswd"
        SUDO git clone https://github.com/mtfurlan/dotfiles.git "$MOUNT_POINT/home/$username/.dotfiles"
        run_chroot chown -R "$username:$username" "/home/$username/.dotfiles"
        #TODO: can run setup.sh here, but needs to be run as user pi, and pi has sudo prompts
        # maybe just set $HOME?

        run_chroot sudo deluser -remove-home pi

        #set hostname, can be run multiple times
        # shellcheck disable=SC2002
        CURRENT_HOSTNAME=$(cat "$MOUNT_POINT/etc/hostname" | tr -d " \t\n\r")
        run_chroot "echo '$hostname' > /etc/hostname"
        run_chroot "sed -i 's/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$hostname/g' /etc/hosts"



        # install random things
        run_chroot apt update
        run_chroot apt install -y git tmux vim-nox

        if [ "$uart" -eq 1 ]; then
            sudo tee -a "$MOUNT_POINT/boot/config.txt" >/dev/null <<EOF
enable_uart=1
EOF
        fi
        if [[ -n "$wifi_ssid" ]]; then
            echo "NOTICE: wifi doesn't work"
            sudo tee "$MOUNT_POINT/boot/wpa_supplicant.conf" >/dev/null <<EOF
country=us
update_config=1
ctrl_interface=/var/run/wpa_supplicant
network={
    ssid="$wifi_ssid"
    psk="$wifi_pass"
}
EOF
        fi

        # try to handle the user setup thing
        run_chroot systemctl disable userconfig || true
        run_chroot rm -f /etc/ssh/sshd_config.d/rename_user.conf

    fi

    if [ "$rpi_shell" -eq 1 ]; then
        sudo chroot ${MOUNT_POINT} bash -i
    fi



    unmount_all

    if [[ -n "$target" ]]; then
        dd_somewhere "$target"
    fi
}

main "$@"

## Notes
### if headless, lower GPU memory
# rpisetup -> advanced -> memory split
### swap off
# sudo dphys-swapfile swapoff
# sudo dphys-swapfile uninstall
# sudo update-rc.d dphys-swapfile remove
### swap flash drive
# find uuid at /dev/disk/by-uuid
# in fstab: UUID=a0345e19-192d-49cf-8402-cc9aacc3c473 none swap sw 0 0
# sudo swapon -a
